Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/09/21 22:05:28
 Project6     (Proj6_meyersz.asm			     Page 1 - 1


				TITLE Project6     (Proj6_meyersz.asm)

				; Author: Zachary Meyers
				; Last Modified: 02021-03-09
				; OSU email address: meyersz@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 2021-03-14
				; Description:		MASM program includes procedures for reading a string into a SDWORD (ReadVal) 
				;				and for reading a SDWORD into a string and displaying it (WriteVal). The main 
				;				function continually prompts for string input using ReadVal to fill an array of ARRAYSIZE 
				;				(constant) SDWORDs. 
				;					ReadVal makes use of a macro mGetString which uses the irvine library procedure ReadString 
				;				to get user input, then ReadVal validates that string input and converts it from a series 
				;				of bytes to a SDWORD, before finally storing it in an array. 
				;					WriteVal is used to convert each element in the array back to a string before printing 
				;				it with the use of a macro mDisplayString (which utilizes the irvine library procedure WriteString) 
				;				to print each converted value. 
				;					Meanwhile, the sum is accumulated, then printed, and the rounded average is calculated based 
				;				on the sum and the size of the array specified by a constant. Floor rounding is used for the average
				;				in case a decimal value is encountered. The program finisheds and says goodbye.
				;  
				; Implementation note: the program accounts for arrays of various sizes (using constants) and can validate 
				;						any string as a signed integer to ensure it fits in a 32 bit register and is in 
				;						integer representation (including a '+' or '-' as the first character)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ********************************
				; mGetString: macro is passed the address of a prompt to print for the user, 
				;			uses ReadString to store keyboard input in the address of str_addr
				;
				; Preconditions: prompt_addr, str_addr, and num_bytes_addr must be passed by reference (OFFSET)
				; Postconditions: output params: 
				;					str_addr will point to the memory address of the user's string
				;					num_bytes_addr will point to the memory address that holds the 
				;					number of bytes in the user's string
				; Receives: input params are prompt_addr, max_len
				; Returns: 
				; ********************************
				mGetString MACRO prompt_addr, str_addr, max_len, num_bytes_addr
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					PUSH	EDI						; Save used registers

					MOV		EDX, prompt_addr
					CALL	WriteString
					MOV		EDX, str_addr
					MOV		ECX, max_len
					CALL	ReadString
					MOV		EDI, num_bytes_addr
					MOV		[EDI], EAX				; EAX holds # bytes read from ReadString

					POP		EDI						; Restore used registers
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				; ********************************
				; mDisplayString: macro is passed the address of a byte array and 
				;					prints it with the use of WriteString
				;
				; Preconditions: buffer_addr must be passed by reference (OFFSET)
				; Postconditions:
				; Receives: buffer
				; Returns: 
				; ********************************
				mDisplayString MACRO buffer_addr
					PUSH	EDX					; save EDX
					MOV		EDX, buffer_addr
					CALL	WriteString
					POP		EDX					; restore EDX
				ENDM

 = 00000021			MAXSIZE = 33
 = 0000000A			ARRAYSIZE = 10

 00000000			.data

 00000000 50 72 6F 6A 65		intro1			BYTE	"Project 6: Designing low level I/O procedures by Zachary Meyers",13,10,13,10,0
	   63 74 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 20
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 62 79 20 5A
	   61 63 68 61 72
	   79 20 4D 65 79
	   65 72 73 0D 0A
	   0D 0A 00
 00000044 50 6C 65 61 73		intro2			BYTE	"Please enter 10 signed decimal integers.",13,10
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   0D 0A
 0000006E  45 61 63 68 20						BYTE	"Each number must be able to fit inside a 32 bit register.",13,10
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 0D 0A
 000000A9  4F 6E 63 65 20						BYTE	"Once finished I'll diplay your list of numbers, ",13,10
	   66 69 6E 69 73
	   68 65 64 20 49
	   27 6C 6C 20 64
	   69 70 6C 61 79
	   20 79 6F 75 72
	   20 6C 69 73 74
	   20 6F 66 20 6E
	   75 6D 62 65 72
	   73 2C 20 0D 0A
 000000DB  61 6C 6F 6E 67						BYTE	"along with their sum and rounded average.",13,10,13,10,0
	   20 77 69 74 68
	   20 74 68 65 69
	   72 20 73 75 6D
	   20 61 6E 64 20
	   72 6F 75 6E 64
	   65 64 20 61 76
	   65 72 61 67 65
	   2E 0D 0A 0D 0A
	   00
 00000109 50 6C 65 61 73		prompt1			BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000128  00000021 [			user_str		BYTE	MAXSIZE DUP(?)
	    00
	   ]
 00000149 00000000			num_bytes		DWORD	?
 0000014D 45 52 52 4F 52		error_msg		BYTE	"ERROR: you didn't enter a signed number, or your number was too big!",13,10,0
	   3A 20 79 6F 75
	   20 64 69 64 6E
	   27 74 20 65 6E
	   74 65 72 20 61
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 2C
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 21 0D 0A
	   00
 00000194 00000000			user_num		SDWORD	?
 00000198  0000000A [			numArray		SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 000001C0 0000006D			test_num		SDWORD	109
 000001C4  00000021 [			out_string		BYTE	MAXSIZE DUP(?)
	    00
	   ]
 000001E5 59 6F 75 20 65		array_prompt	BYTE	"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 0000020A 54 68 65 20 73		sum_prompt		BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000228 54 68 65 20 72		avg_prompt		BYTE	"The rounded average (floor) is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   28 66 6C 6F 6F
	   72 29 20 69 73
	   3A 20 00
 00000249 00000000			sum				SDWORD	0
 0000024D 00000000			sum_negative	SDWORD	0	; use as flag for rounding later
 00000251 00000000			average			SDWORD	?
 00000255 54 68 61 6E 6B		goodbye			BYTE	"Thanks for playing, see ya!",13,10,0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 2C 20
	   73 65 65 20 79
	   61 21 0D 0A 00

 00000000			.code
 00000000			main PROC

				; introduction: use macro to print intro1 and intro 2
					mDisplayString OFFSET intro1
 00000000  52		     1		PUSH	EDX					; save EDX
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET intro1
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX					; restore EDX
					mDisplayString OFFSET intro2
 0000000C  52		     1		PUSH	EDX					; save EDX
 0000000D  BA 00000044 R     1		MOV		EDX, OFFSET intro2
 00000012  E8 00000000 E     1		CALL	WriteString
 00000017  5A		     1		POP		EDX					; restore EDX

				; fill the array with 10 integers using ReadVal
 00000018  BF 00000198 R		MOV		EDI, OFFSET numArray
 0000001D  B9 0000000A			MOV		ECX, LENGTHOF numArray
 00000022			_fillArray:
 00000022  68 0000014D R		PUSH	OFFSET error_msg
 00000027  68 00000194 R		PUSH	OFFSET user_num
 0000002C  68 00000109 R		PUSH	OFFSET prompt1
 00000031  68 00000128 R		PUSH	OFFSET user_str
 00000036  6A 21			PUSH	MAXSIZE
 00000038  68 00000149 R		PUSH	OFFSET num_bytes
 0000003D  E8 000000F0			CALL	ReadVal				; prompts user, validates string input, converts to SDWORD
 00000042  A1 00000194 R		MOV		EAX, user_num
 00000047  89 07			MOV		[EDI], EAX			; move user_num into array
 00000049  83 C7 04			ADD		EDI, TYPE numArray	; increment array address by type (go to next position)
 0000004C  E2 D4			LOOP	_fillArray

				; use macro to display array prompt
 0000004E  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET array_prompt
 00000053  52		     1		PUSH	EDX					; save EDX
 00000054  BA 000001E5 R     1		MOV		EDX, OFFSET array_prompt
 00000059  E8 00000000 E     1		CALL	WriteString
 0000005E  5A		     1		POP		EDX					; restore EDX

				; display the array using WriteVal, and accumulate the sum
 0000005F  BE 00000198 R		MOV		ESI, OFFSET numArray
 00000064  B9 0000000A			MOV		ECX, ARRAYSIZE
 00000069			_displayLoop:
 00000069  A1 00000249 R		MOV		EAX, sum			
 0000006E  03 06			ADD		EAX, [ESI]			
 00000070  A3 00000249 R		MOV		sum, EAX			; acumulate each element in sum
 00000075  FF 36			PUSH	[ESI]				; push the current element to WriteVal
 00000077  68 000001C4 R		PUSH	OFFSET out_string
 0000007C  6A 21			PUSH	LENGTHOF out_string
 0000007E  E8 00000167			CALL	WriteVal			; display value as string
 00000083  83 F9 01			CMP		ECX, 1
 00000086  74 07			JE		_noComma			; don't print a comma if last element
 00000088  B0 2C			MOV		AL, 2Ch				; ","
 0000008A  E8 00000000 E		CALL	WriteChar
 0000008F			_noComma:	
 0000008F  B0 20			MOV		AL, 20h	
 00000091  E8 00000000 E		CALL	WriteChar			; " "
 00000096  83 C6 04			ADD		ESI, TYPE numArray	; increment ESI to get next element
 00000099  E2 CE			LOOP	_displayLoop
 0000009B  E8 00000000 E		CALL	CrLf				; new line after displaying array

				; use macro to diplay sum prompt, use WriteVal to display sum
					mDisplayString OFFSET sum_prompt
 000000A0  52		     1		PUSH	EDX					; save EDX
 000000A1  BA 0000020A R     1		MOV		EDX, OFFSET sum_prompt
 000000A6  E8 00000000 E     1		CALL	WriteString
 000000AB  5A		     1		POP		EDX					; restore EDX
 000000AC  FF 35 00000249 R		PUSH	sum
 000000B2  68 000001C4 R		PUSH	OFFSET out_string
 000000B7  6A 21			PUSH	LENGTHOF out_string
 000000B9  E8 0000012C			CALL	WriteVal
 000000BE  E8 00000000 E		CALL	CrLf

				; determine if sum is positive or negative 
				; (use for floor rounding the average later)
 000000C3  A1 00000249 R		MOV		EAX, sum
 000000C8  83 C0 00			ADD		EAX, 0
 000000CB  78 02			JS		_setNegative
 000000CD  EB 0A			JMP		_calculateAvg
 000000CF			_setNegative:
 000000CF  C7 05 0000024D R		MOV		sum_negative, 1
	   00000001

				; calculate rounded average
 000000D9			_calculateAvg:
 000000D9  A1 00000249 R		MOV		EAX, sum
 000000DE  BB 0000000A			MOV		EBX, ARRAYSIZE
 000000E3  99				CDQ
 000000E4  F7 FB			IDIV	EBX
 000000E6  83 3D 0000024D R		CMP		sum_negative, 1
	   01
 000000ED  74 02			JE		_negativeRound		; if sum was negative, round average down
 000000EF  EB 01			JMP		_storeAvg
 000000F1			_negativeRound:
 000000F1  48				DEC		EAX
 000000F2			_storeAvg:
 000000F2  A3 00000251 R		MOV		average, EAX	; sum / arraysize = average

				; use macro to display average prompt, use WriteVal to display rounded average
					mDisplayString OFFSET avg_prompt
 000000F7  52		     1		PUSH	EDX					; save EDX
 000000F8  BA 00000228 R     1		MOV		EDX, OFFSET avg_prompt
 000000FD  E8 00000000 E     1		CALL	WriteString
 00000102  5A		     1		POP		EDX					; restore EDX
 00000103  FF 35 00000251 R		PUSH	average
 00000109  68 000001C4 R		PUSH	OFFSET out_string
 0000010E  6A 21			PUSH	LENGTHOF out_string
 00000110  E8 000000D5			CALL	WriteVal
 00000115  E8 00000000 E		CALL	CrLf

				; use macro to display farewell message
 0000011A  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET goodbye
 0000011F  52		     1		PUSH	EDX					; save EDX
 00000120  BA 00000255 R     1		MOV		EDX, OFFSET goodbye
 00000125  E8 00000000 E     1		CALL	WriteString
 0000012A  5A		     1		POP		EDX					; restore EDX

					Invoke ExitProcess,0	; exit to operating system
 0000012B  6A 00	   *	    push   +000000000h
 0000012D  E8 00000000 E   *	    call   ExitProcess
 00000132			main ENDP

				; ********************************
				; ReadVal: uses the mGetString macro to read a user's sting, validates each ASCII byte, 
				;			and converts the string to a SDWORD
				;
				; Preconditions: mGetString must be defined for getting user input, user_num must be SDWORD
				; Postconditions: converted string is stored as a SDWORD in user_num
				; Receives: addresses for... error_msg, user_num,prompt1, user_str, num_bytes... and
				;			MAXSIZE constant as parameters on the system stack
				; Returns: 
				; ********************************
 00000132			ReadVal PROC
					; setup local vars: negative to use as flag, str_bytes to store num_bytes for later use
					LOCAL negative:DWORD, str_bytes:DWORD	
 00000132  55		   *	    push   ebp
 00000133  8B EC	   *	    mov    ebp, esp
 00000135  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000138  60				PUSHAD									; push GP registers

 00000139			_getUserData:
					; Get user's string, use macro with addresses and 
					; identifiers from the stack frame:
					;	[EBP+20] = offset prompt1
					;	[EBP+16] = offset user_str
					;   [EBP+12] = MAXSIZE constant
					;	[EBP+8] = offset num_bytes
					mGetString [EBP+20], [EBP+16], [EBP+12], [EBP+8]
 00000139  52		     1		PUSH	EDX
 0000013A  51		     1		PUSH	ECX
 0000013B  50		     1		PUSH	EAX
 0000013C  57		     1		PUSH	EDI						; Save used registers
 0000013D  8B 55 14	     1		MOV		EDX, [EBP+20]
 00000140  E8 00000000 E     1		CALL	WriteString
 00000145  8B 55 10	     1		MOV		EDX, [EBP+16]
 00000148  8B 4D 0C	     1		MOV		ECX, [EBP+12]
 0000014B  E8 00000000 E     1		CALL	ReadString
 00000150  8B 7D 08	     1		MOV		EDI, [EBP+8]
 00000153  89 07	     1		MOV		[EDI], EAX				; EAX holds # bytes read from ReadString
 00000155  5F		     1		POP		EDI						; Restore used registers
 00000156  58		     1		POP		EAX
 00000157  59		     1		POP		ECX
 00000158  5A		     1		POP		EDX

 00000159  8B 75 10			MOV		ESI, [EBP+16]		; address of user's string in ESI
 0000015C  8B 7D 18			MOV		EDI, [EBP+24]		; address of user_num in EDI
 0000015F  8B 45 08			MOV		EAX, [EBP+8]		; address of num_bytes in EAX
 00000162  8B 08			MOV		ECX, [EAX]			; num_bytes in ECX (loop)
 00000164  89 4D F8			MOV		str_bytes, ECX
 00000167  C7 45 FC			MOV		negative, 0			; set local negative flag to 0
	   00000000
 0000016E  B8 00000000			MOV		EAX, 0				
 00000173  BB 00000000			MOV		EBX, 0				; use EBX for running total
					
 00000178  FC				CLD		; clear direction flag
 00000179			_stringLoop:
 00000179  AC				LODSB
 0000017A  3B 4D F8			CMP		ECX, str_bytes
 0000017D  74 02			JE		_signCheck		; if first time through loop, check for a sign character
 0000017F  EB 1C			JMP		_charValidate
 00000181				_signCheck:
 00000181  3C 2D				CMP		AL, 2Dh			; if byte is "-", set local negative flag
 00000183  74 06				JE		_negative
 00000185  3C 2B				CMP		AL, 2Bh			; if byte is "+", clear local negative flag
 00000187  74 0B				JE		_positive
 00000189  EB 12				JMP		_charValidate	; if no sign, proceed to validation
 0000018B					_negative:
 0000018B  C7 45 FC					MOV		negative, 1		; set local negative flag
	   00000001
 00000192  E2 E5					LOOP	_stringLoop		; keep looping
 00000194					_positive:
 00000194  C7 45 FC					MOV		negative, 0		; clear local negative flag
	   00000000
 0000019B  E2 DC					LOOP	_stringLoop		; keep looping
 0000019D			_charValidate:
 0000019D  3C 30			CMP		AL, 30h
 0000019F  7C 37			JL		_error
 000001A1  3C 39			CMP		AL, 39h
 000001A3  7F 33			JG		_error			; if current byte is not an ASCII hex representation of 0-9, error
 000001A5  2C 30			SUB		AL, 30h			; otherwise, valid, convert byte
 000001A7  50				PUSH	EAX				; save modified byte
 000001A8  8B C3			MOV		EAX, EBX
 000001AA  BB 0000000A			MOV		EBX, 10
 000001AF  F7 E3			MUL		EBX				
 000001B1  8B D8			MOV		EBX, EAX		; multiply running total by 10, store in EBX
 000001B3  58				POP		EAX				; restore modified byte
 000001B4  03 D8			ADD		EBX, EAX		; running total * 10 +=  modified byte
 000001B6  E2 C1			LOOP	_stringLoop
					
					; loop finished, check for overflow, convert if necessary, store
 000001B8  83 7D FC 01			CMP		negative, 1
 000001BC  74 0A			JE		_negOverflowCheck
 000001BE				_posOverflowCheck:
 000001BE  81 FB 7FFFFFFF			CMP		EBX, 7FFFFFFFh	
 000001C4  77 12				JA		_error			; error if pos val > 2^31 - 1
 000001C6  EB 0C				JMP		_storeNum
 000001C8				_negOverflowCheck:
 000001C8  81 FB 80000000			CMP		EBX, 80000000h	
 000001CE  77 08				JA		_error			; error if neg val < -(2^31)
 000001D0  F7 DB				NEG		EBX				; if local negative flag is set, negate EBX
 000001D2  EB 00				JMP		_storeNum
 000001D4			_storeNum:
 000001D4  89 1F			MOV		[EDI], EBX		; store converted string in user_num
 000001D6  EB 0D			JMP		_end
 000001D8			_error:
 000001D8  8B 55 1C			MOV		EDX, [EBP+28]	; error message in EDX
 000001DB  E8 00000000 E		CALL	WriteString
 000001E0  E9 FFFFFF54			JMP		_getUserData	; get new input (start all the way over)
 000001E5			_end:
 000001E5  61				POPAD		; pop GP registers
 000001E6  C9		   *	    leave  
 000001E7  C2 0018			RET 24
 000001EA			ReadVal ENDP

				; ********************************
				; WriteVal: takes a signed integer value, converts it to a string, and displays it
				;
				; Preconditions: 
				; Postconditions: out_string contains ASCII char bytes after conversion
				; Receives: user_num, address of out_string, size of out_string as parameters on system stack
				; Returns: 
				; ********************************
 000001EA			WriteVal PROC
					LOCAL	negative:DWORD	; setup local var as negative flag
 000001EA  55		   *	    push   ebp
 000001EB  8B EC	   *	    mov    ebp, esp
 000001ED  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000001F0  60				PUSHAD

 000001F1  C7 45 FC			MOV		negative, 0		; clear local negative flag
	   00000000
 000001F8  8B 7D 0C			MOV		EDI, [EBP+12]	; address of out_string in EDI
 000001FB  03 7D 08			ADD		EDI, [EBP+8]	; add length of out_string to EDI
 000001FE  4F				DEC		EDI				; access last byte
 000001FF  B0 00			MOV		AL, 0
 00000201  FD				STD						; move backwards through out_string
 00000202  AA				STOSB					; store null terminator

 00000203  8B 45 10			MOV		EAX, [EBP+16]	; num in EAX
 00000206  BB 0000000A			MOV		EBX, 10			; divisor (10) in EBX
 0000020B  83 C0 00			ADD		EAX, 0			; test sign flag
 0000020E  79 09			JNS		_convert		; if val in EAX is positive, jump to convert
					; otherwise, set local negative flag and negate EAX, then convert
 00000210  C7 45 FC			MOV		negative, 1		
	   00000001
 00000217  F7 D8			NEG		EAX
 00000219			_convert:
				; keep dividing num, converting remainder, storing as byte
 00000219			_divisionLoop:
 00000219  99				CDQ
 0000021A  F7 FB			IDIV	EBX				; divide quotient by 10
 0000021C  83 C2 30			ADD		EDX, 30h		; convert remainder (last digit) to ASCII
 0000021F  50				PUSH	EAX				; preserve quotient
 00000220  8A C2			MOV		AL, DL			; store ASCII byte in AL
 00000222  AA				STOSB					; store in out_string
 00000223  58				POP		EAX				; restore quotient
 00000224  83 F8 00			CMP		EAX, 0
 00000227  75 F0			JNE		_divisionLoop	; keep dividing/converting/storing bytes until quotient is 0
					
					; once loop ends, if negative flag was set, store "-" in EDI
 00000229  83 7D FC 01			CMP		negative, 1
 0000022D  75 03			JNE		_printStr		; if positive, print normal
 0000022F  B0 2D			MOV		AL, 2Dh			
 00000231  AA				STOSB					; if negative, store "-"

 00000232			_printStr:	
					;increase EDI pointer once more to access first byte
 00000232  47				INC		EDI
					; use macro to display the converted num as a string
					mDisplayString EDI
 00000233  52		     1		PUSH	EDX					; save EDX
 00000234  8B D7	     1		MOV		EDX, EDI
 00000236  E8 00000000 E     1		CALL	WriteString
 0000023B  5A		     1		POP		EDX					; restore EDX

 0000023C  61				POPAD
 0000023D  C9		   *	    leave  
 0000023E  C2 000C			RET	12
 00000241			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/09/21 22:05:28
 Project6     (Proj6_meyersz.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000273 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000241 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000132 _TEXT	Length= 000000B8 Public STDCALL
  negative . . . . . . . . . . .	DWord	 bp - 00000004
  str_bytes  . . . . . . . . . .	DWord	 bp - 00000008
  _getUserData . . . . . . . . .	L Near	 00000139 _TEXT	
  _stringLoop  . . . . . . . . .	L Near	 00000179 _TEXT	
  _signCheck . . . . . . . . . .	L Near	 00000181 _TEXT	
  _negative  . . . . . . . . . .	L Near	 0000018B _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000194 _TEXT	
  _charValidate  . . . . . . . .	L Near	 0000019D _TEXT	
  _posOverflowCheck  . . . . . .	L Near	 000001BE _TEXT	
  _negOverflowCheck  . . . . . .	L Near	 000001C8 _TEXT	
  _storeNum  . . . . . . . . . .	L Near	 000001D4 _TEXT	
  _error . . . . . . . . . . . .	L Near	 000001D8 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001E5 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001EA _TEXT	Length= 00000057 Public STDCALL
  negative . . . . . . . . . . .	DWord	 bp - 00000004
  _convert . . . . . . . . . . .	L Near	 00000219 _TEXT	
  _divisionLoop  . . . . . . . .	L Near	 00000219 _TEXT	
  _printStr  . . . . . . . . . .	L Near	 00000232 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000132 Public STDCALL
  _fillArray . . . . . . . . . .	L Near	 00000022 _TEXT	
  _displayLoop . . . . . . . . .	L Near	 00000069 _TEXT	
  _noComma . . . . . . . . . . .	L Near	 0000008F _TEXT	
  _setNegative . . . . . . . . .	L Near	 000000CF _TEXT	
  _calculateAvg  . . . . . . . .	L Near	 000000D9 _TEXT	
  _negativeRound . . . . . . . .	L Near	 000000F1 _TEXT	
  _storeAvg  . . . . . . . . . .	L Near	 000000F2 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 00000021h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array_prompt . . . . . . . . . .	Byte	 000001E5 _DATA	
average  . . . . . . . . . . . .	DWord	 00000251 _DATA	
avg_prompt . . . . . . . . . . .	Byte	 00000228 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error_msg  . . . . . . . . . . .	Byte	 0000014D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000255 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000044 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000198 _DATA	
num_bytes  . . . . . . . . . . .	DWord	 00000149 _DATA	
out_string . . . . . . . . . . .	Byte	 000001C4 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000109 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_negative . . . . . . . . . .	DWord	 0000024D _DATA	
sum_prompt . . . . . . . . . . .	Byte	 0000020A _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000249 _DATA	
test_num . . . . . . . . . . . .	DWord	 000001C0 _DATA	
user_num . . . . . . . . . . . .	DWord	 00000194 _DATA	
user_str . . . . . . . . . . . .	Byte	 00000128 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
