Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/09/21 11:48:52
 Project6     (Proj6_meyersz.asm			     Page 1 - 1


				TITLE Project6     (Proj6_meyersz.asm)

				; Author: Zachary Meyers
				; Last Modified: 02021-03-03
				; OSU email address: meyersz@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 2021-03-14
				; Description: ..............................

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ********************************
				; mGetString: macro is passed the address of a prompt to print for the user, 
				;			uses ReadString to store keyboard input in the address of str_addr
				;
				; Preconditions: prompt_addr, str_addr, and num_bytes_addr must be passed by reference (OFFSET)
				; Postconditions: output params: 
				;					str_addr will point to the memory address of the user's string
				;					num_bytes_addr will point to the memory address that holds the 
				;					number of bytes in the user's string
				; Receives: input params are prompt_addr, max_len
				; Returns: 
				; ********************************
				mGetString MACRO prompt_addr, str_addr, max_len, num_bytes_addr
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					PUSH	EDI						; Save used registers

					MOV		EDX, prompt_addr
					CALL	WriteString
					MOV		EDX, str_addr
					MOV		ECX, max_len
					CALL	ReadString
					MOV		EDI, num_bytes_addr
					MOV		[EDI], EAX				; EAX holds # bytes read from ReadString

					POP		EDI						; Restore used registers
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				; ********************************
				; mDisplayString: macro is passed the address of a byte array and 
				;					prints it with the use of WriteString
				;
				; Preconditions: buffer_addr must be passed by reference (OFFSET)
				; Postconditions:
				; Receives: buffer
				; Returns: 
				; ********************************
				mDisplayString MACRO buffer_addr
					PUSH	EDX					; save EDX
					MOV		EDX, buffer_addr
					CALL	WriteString
					POP		EDX					; restore EDX
				ENDM

 = 00000021			MAXSIZE = 33
 = 0000000A			ARRAYSIZE = 10

 00000000			.data

 00000000 50 6C 65 61 73		prompt1			BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000001F  00000021 [			user_str		BYTE	MAXSIZE DUP(?)
	    00
	   ]
 00000040 00000000			num_bytes		DWORD	?
 00000044 45 52 52 4F 52		error_msg		BYTE	"ERROR: you didn't enter a signed number, or your number was too big!",13,10,0
	   3A 20 79 6F 75
	   20 64 69 64 6E
	   27 74 20 65 6E
	   74 65 72 20 61
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 2C
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 21 0D 0A
	   00
 0000008B 00000000			user_num		SDWORD	?
 0000008F  0000000A [			numArray		SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]
 000000B7 0000006D			test_num		SDWORD	109
 000000BB  00000021 [			out_string		BYTE	MAXSIZE DUP(?)
	    00
	   ]
 000000DC 59 6F 75 20 65		array_prompt	BYTE	"You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00

 00000000			.code
 00000000			main PROC
					
				; debugging for WriteVal
				;	PUSH	test_num
				;	PUSH	OFFSET out_string
				;	PUSH	LENGTHOF out_string
				;	CALL	WriteVal

				; fill the array of 10 integers with ReadVal
 00000000  BF 0000008F R		MOV		EDI, OFFSET numArray
 00000005  B9 0000000A			MOV		ECX, LENGTHOF numArray
 0000000A			_fillArray:
 0000000A  68 00000044 R		PUSH	OFFSET error_msg
 0000000F  68 0000008B R		PUSH	OFFSET user_num
 00000014  68 00000000 R		PUSH	OFFSET prompt1
 00000019  68 0000001F R		PUSH	OFFSET user_str
 0000001E  6A 21			PUSH	MAXSIZE
 00000020  68 00000040 R		PUSH	OFFSET num_bytes
 00000025  E8 00000059			CALL	ReadVal				; prompts user, validates string input, converts to SDWORD
 0000002A  A1 0000008B R		MOV		EAX, user_num
 0000002F  89 07			MOV		[EDI], EAX			; move user_num into array
 00000031  83 C7 04			ADD		EDI, TYPE numArray	; increment array address by type (go to next position)
 00000034  E2 D4			LOOP	_fillArray

				; display array prompt
 00000036  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET array_prompt
 0000003B  52		     1		PUSH	EDX					; save EDX
 0000003C  BA 000000DC R     1		MOV		EDX, OFFSET array_prompt
 00000041  E8 00000000 E     1		CALL	WriteString
 00000046  5A		     1		POP		EDX					; restore EDX

				; display the array using WriteVal
 00000047  BE 0000008F R		MOV		ESI, OFFSET numArray
 0000004C  B9 0000000A			MOV		ECX, ARRAYSIZE
 00000051			_displayLoop:
 00000051  FF 36			PUSH	[ESI]				; push the current element to WriteVal
 00000053  68 000000BB R		PUSH	OFFSET out_string
 00000058  6A 21			PUSH	LENGTHOF out_string
 0000005A  E8 000000DC			CALL	WriteVal			; display value as string
 0000005F  83 F9 01			CMP		ECX, 1
 00000062  74 07			JE		_noComma			; don't print a comma if last element
 00000064  B0 2C			MOV		AL, 2Ch				; ","
 00000066  E8 00000000 E		CALL	WriteChar
 0000006B			_noComma:	
 0000006B  B0 20			MOV		AL, 20h	
 0000006D  E8 00000000 E		CALL	WriteChar			; " "
 00000072  83 C6 04			ADD		ESI, TYPE numArray	; increment ESI to get next element
 00000075  E2 DA			LOOP	_displayLoop
 00000077  E8 00000000 E		CALL	CrLf				; new line after displaying array

					Invoke ExitProcess,0	; exit to operating system
 0000007C  6A 00	   *	    push   +000000000h
 0000007E  E8 00000000 E   *	    call   ExitProcess
 00000083			main ENDP

				; ********************************
				; ReadVal: uses the mGetString macro to read a user's sting, validates each ASCII byte, 
				;			and converts the string to a SDWORD
				;
				; Preconditions: mGetString must be defined for getting user input, user_num must be SDWORD
				; Postconditions: converted string is stored as a SDWORD in user_num
				; Receives: addresses for... error_msg, user_num,prompt1, user_str, num_bytes... and
				;			MAXSIZE constant as parameters on the system stack
				; Returns: 
				; ********************************
 00000083			ReadVal PROC
					; setup local vars: negative to use as flag, str_bytes to store num_bytes for later use
					LOCAL negative:DWORD, str_bytes:DWORD	
 00000083  55		   *	    push   ebp
 00000084  8B EC	   *	    mov    ebp, esp
 00000086  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000089  60				PUSHAD									; push GP registers

 0000008A			_getUserData:
					; Get user's string, use macro with addresses and 
					; identifiers from the stack frame:
					;	[EBP+20] = offset prompt1
					;	[EBP+16] = offset user_str
					;   [EBP+12] = MAXSIZE constant
					;	[EBP+8] = offset num_bytes
					mGetString [EBP+20], [EBP+16], [EBP+12], [EBP+8]
 0000008A  52		     1		PUSH	EDX
 0000008B  51		     1		PUSH	ECX
 0000008C  50		     1		PUSH	EAX
 0000008D  57		     1		PUSH	EDI						; Save used registers
 0000008E  8B 55 14	     1		MOV		EDX, [EBP+20]
 00000091  E8 00000000 E     1		CALL	WriteString
 00000096  8B 55 10	     1		MOV		EDX, [EBP+16]
 00000099  8B 4D 0C	     1		MOV		ECX, [EBP+12]
 0000009C  E8 00000000 E     1		CALL	ReadString
 000000A1  8B 7D 08	     1		MOV		EDI, [EBP+8]
 000000A4  89 07	     1		MOV		[EDI], EAX				; EAX holds # bytes read from ReadString
 000000A6  5F		     1		POP		EDI						; Restore used registers
 000000A7  58		     1		POP		EAX
 000000A8  59		     1		POP		ECX
 000000A9  5A		     1		POP		EDX

 000000AA  8B 75 10			MOV		ESI, [EBP+16]		; address of user's string in ESI
 000000AD  8B 7D 18			MOV		EDI, [EBP+24]		; address of user_num in EDI
 000000B0  8B 45 08			MOV		EAX, [EBP+8]		; address of num_bytes in EAX
 000000B3  8B 08			MOV		ECX, [EAX]			; num_bytes in ECX (loop)
 000000B5  89 4D F8			MOV		str_bytes, ECX
 000000B8  C7 45 FC			MOV		negative, 0			; set local negative flag to 0
	   00000000
 000000BF  B8 00000000			MOV		EAX, 0				
 000000C4  BB 00000000			MOV		EBX, 0				; use EBX for running total
					
 000000C9  FC				CLD		; clear direction flag
 000000CA			_stringLoop:
 000000CA  AC				LODSB
 000000CB  3B 4D F8			CMP		ECX, str_bytes
 000000CE  74 02			JE		_signCheck		; if first time through loop, check for a sign character
 000000D0  EB 1C			JMP		_charValidate
 000000D2				_signCheck:
 000000D2  3C 2D				CMP		AL, 2Dh			; if byte is "-", set local negative flag
 000000D4  74 06				JE		_negative
 000000D6  3C 2B				CMP		AL, 2Bh			; if byte is "+", clear local negative flag
 000000D8  74 0B				JE		_positive
 000000DA  EB 12				JMP		_charValidate	; if no sign, proceed to validation
 000000DC					_negative:
 000000DC  C7 45 FC					MOV		negative, 1		; set local negative flag
	   00000001
 000000E3  E2 E5					LOOP	_stringLoop		; keep looping
 000000E5					_positive:
 000000E5  C7 45 FC					MOV		negative, 0		; clear local negative flag
	   00000000
 000000EC  E2 DC					LOOP	_stringLoop		; keep looping
 000000EE			_charValidate:
 000000EE  3C 30			CMP		AL, 30h
 000000F0  7C 37			JL		_error
 000000F2  3C 39			CMP		AL, 39h
 000000F4  7F 33			JG		_error			; if current byte is not an ASCII hex representation of 0-9, error
 000000F6  2C 30			SUB		AL, 30h			; otherwise, valid, convert byte
 000000F8  50				PUSH	EAX				; save modified byte
 000000F9  8B C3			MOV		EAX, EBX
 000000FB  BB 0000000A			MOV		EBX, 10
 00000100  F7 E3			MUL		EBX				
 00000102  8B D8			MOV		EBX, EAX		; multiply running total by 10, store in EBX
 00000104  58				POP		EAX				; restore modified byte
 00000105  03 D8			ADD		EBX, EAX		; running total * 10 +=  modified byte
 00000107  E2 C1			LOOP	_stringLoop
					
					; loop finished, check for overflow, convert if necessary, store
 00000109  83 7D FC 01			CMP		negative, 1
 0000010D  74 0A			JE		_negOverflowCheck
 0000010F				_posOverflowCheck:
 0000010F  81 FB 7FFFFFFF			CMP		EBX, 7FFFFFFFh	
 00000115  77 12				JA		_error			; error if pos val > 2^31 - 1
 00000117  EB 0C				JMP		_storeNum
 00000119				_negOverflowCheck:
 00000119  81 FB 80000000			CMP		EBX, 80000000h	
 0000011F  77 08				JA		_error			; error if neg val < -(2^31)
 00000121  F7 DB				NEG		EBX				; if local negative flag is set, negate EBX
 00000123  EB 00				JMP		_storeNum
 00000125			_storeNum:
 00000125  89 1F			MOV		[EDI], EBX		; store converted string in user_num
 00000127  EB 0D			JMP		_end
 00000129			_error:
 00000129  8B 55 1C			MOV		EDX, [EBP+28]	; error message in EDX
 0000012C  E8 00000000 E		CALL	WriteString
 00000131  E9 FFFFFF54			JMP		_getUserData	; get new input (start all the way over)
 00000136			_end:
 00000136  61				POPAD		; pop GP registers
 00000137  C9		   *	    leave  
 00000138  C2 0018			RET 24
 0000013B			ReadVal ENDP

				; ********************************
				; WriteVal: takes a signed integer value, converts it to a string, and displays it
				;
				; Preconditions: 
				; Postconditions: out_string contains ASCII char bytes after conversion
				; Receives: test_num, address of out_string, size of out_string as parameters on system stack
				; Returns: 
				; ********************************
 0000013B			WriteVal PROC
					LOCAL	negative:DWORD	; setup local var as negative flag
 0000013B  55		   *	    push   ebp
 0000013C  8B EC	   *	    mov    ebp, esp
 0000013E  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000141  60				PUSHAD

 00000142  C7 45 FC			MOV		negative, 0		; clear local negative flag
	   00000000
 00000149  8B 7D 0C			MOV		EDI, [EBP+12]	; address of out_string in EDI
 0000014C  03 7D 08			ADD		EDI, [EBP+8]	; add length of out_string to EDI
 0000014F  4F				DEC		EDI				; access last byte
 00000150  B0 00			MOV		AL, 0
 00000152  FD				STD						; move backwards through out_string
 00000153  AA				STOSB					; store null terminator

 00000154  8B 45 10			MOV		EAX, [EBP+16]	; num in EAX
 00000157  BB 0000000A			MOV		EBX, 10			; divisor (10) in EBX
 0000015C  83 C0 00			ADD		EAX, 0			; test sign flag
 0000015F  79 09			JNS		_convert		; if val in EAX is positive, jump to convert
					; otherwise, set local negative flag and negate EAX, then convert
 00000161  C7 45 FC			MOV		negative, 1		
	   00000001
 00000168  F7 D8			NEG		EAX
 0000016A			_convert:
				; keep dividing num, converting remainder, storing as byte
 0000016A			_divisionLoop:
 0000016A  99				CDQ
 0000016B  F7 FB			IDIV	EBX				; divide quotient by 10
 0000016D  83 C2 30			ADD		EDX, 30h		; convert remainder (last digit) to ASCII
 00000170  50				PUSH	EAX				; preserve quotient
 00000171  8A C2			MOV		AL, DL			; store ASCII byte in AL
 00000173  AA				STOSB					; store in out_string
 00000174  58				POP		EAX				; restore quotient
 00000175  83 F8 00			CMP		EAX, 0
 00000178  75 F0			JNE		_divisionLoop	; keep dividing/converting/storing bytes until quotient is 0
					
					; once loop ends, if negative flag was set, store "-" in EDI
 0000017A  83 7D FC 01			CMP		negative, 1
 0000017E  75 03			JNE		_printStr		; if positive, print normal
 00000180  B0 2D			MOV		AL, 2Dh			
 00000182  AA				STOSB					; if negative, store "-"

 00000183			_printStr:	
					;increase EDI pointer once more to access first byte
 00000183  47				INC		EDI
					; use macro to display the converted num as a string
					mDisplayString EDI
 00000184  52		     1		PUSH	EDX					; save EDX
 00000185  8B D7	     1		MOV		EDX, EDI
 00000187  E8 00000000 E     1		CALL	WriteString
 0000018C  5A		     1		POP		EDX					; restore EDX

 0000018D  61				POPAD
 0000018E  C9		   *	    leave  
 0000018F  C2 000C			RET	12
 00000192			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/09/21 11:48:52
 Project6     (Proj6_meyersz.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000101 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000192 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000083 _TEXT	Length= 000000B8 Public STDCALL
  negative . . . . . . . . . . .	DWord	 bp - 00000004
  str_bytes  . . . . . . . . . .	DWord	 bp - 00000008
  _getUserData . . . . . . . . .	L Near	 0000008A _TEXT	
  _stringLoop  . . . . . . . . .	L Near	 000000CA _TEXT	
  _signCheck . . . . . . . . . .	L Near	 000000D2 _TEXT	
  _negative  . . . . . . . . . .	L Near	 000000DC _TEXT	
  _positive  . . . . . . . . . .	L Near	 000000E5 _TEXT	
  _charValidate  . . . . . . . .	L Near	 000000EE _TEXT	
  _posOverflowCheck  . . . . . .	L Near	 0000010F _TEXT	
  _negOverflowCheck  . . . . . .	L Near	 00000119 _TEXT	
  _storeNum  . . . . . . . . . .	L Near	 00000125 _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000129 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000136 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000013B _TEXT	Length= 00000057 Public STDCALL
  negative . . . . . . . . . . .	DWord	 bp - 00000004
  _convert . . . . . . . . . . .	L Near	 0000016A _TEXT	
  _divisionLoop  . . . . . . . .	L Near	 0000016A _TEXT	
  _printStr  . . . . . . . . . .	L Near	 00000183 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000083 Public STDCALL
  _fillArray . . . . . . . . . .	L Near	 0000000A _TEXT	
  _displayLoop . . . . . . . . .	L Near	 00000051 _TEXT	
  _noComma . . . . . . . . . . .	L Near	 0000006B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 00000021h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array_prompt . . . . . . . . . .	Byte	 000000DC _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error_msg  . . . . . . . . . . .	Byte	 00000044 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 0000008F _DATA	
num_bytes  . . . . . . . . . . .	DWord	 00000040 _DATA	
out_string . . . . . . . . . . .	Byte	 000000BB _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
test_num . . . . . . . . . . . .	DWord	 000000B7 _DATA	
user_num . . . . . . . . . . . .	DWord	 0000008B _DATA	
user_str . . . . . . . . . . . .	Byte	 0000001F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
